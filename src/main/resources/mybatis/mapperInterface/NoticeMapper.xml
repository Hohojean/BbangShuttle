<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="resources.mybatis.mapperInterface.NoticeMapper">

    <!-- ** SearchCriteria PageList
    => sql Tag : 필요한 sql 구문을 만들어놓고 필요할때마다 사용가능
    => include Tag : 호출 tag
              적용 범위 ->  "and 나머지조건 )"
              where ( noticeNo>0 and 나머지조건 )

    => 조건문 : searchType: title , keyword: Java
               where title like '%'+#{keyword}+'%'
               매번 문자열 + 연산 (Concate...함수 사용해야함) 하기는 아래의 예시와 같이 불편
               그래서 이값을 변수로 처리 -> bind Tag
               * 예시
                and title Like  CONCAT('%',CONCAT(#{keyword},'%'))
                and title Like  '%' || #{keyword} || '%' )
    -->
    <sql id="search">
        <if test="keyword!=null">
            <bind name="keyVal" value="'%'+keyword+'%'"/>
        </if>
        <choose>
            <when test="searchType=='t'.toString()">
                and title like #{keyVal} )
            </when>
            <when test="searchType=='c'.toString()">
                and content like #{keyVal} )
            </when>
            <when test="searchType=='i'.toString()">
                and id like #{keyVal} )
            </when>
            <when test="searchType=='r'.toString()">
                and regdate like #{keyVal} )
            </when>
            <when test="searchType=='tc'.toString()">
                and title like #{keyVal}
                or content like #{keyVal} )
            </when>
            <when test="searchType=='tci'.toString()">
                and title like #{keyVal}
                or content like #{keyVal}
                or id like #{keyVal} )
            </when>
            <otherwise> )</otherwise>
        </choose>
    </sql>

    <select id="searchList" resultType="vo.NoticeVO">
        select noticeNo, noticeTitle, noticeContent, regdate, cnt
        from notice
        where ( noticeNo>0 <include refid="search"></include>
        order by root desc, step asc
        limit #{sno}, #{rowsPerPage}
    </select>

    <select id="searchTotalCount" resultType="int">
        select count(*) from notice
        where ( noticeNo>0 <include refid="search"></include>
    </select>

            <!-- ** Criteria PageList
                => MySql : limit a , b ( a개 제외하고 a+1 부터 b개 )  적용 -->
    <select id="criList" resultType="vo.NoticeVO">
        select noticeNo, noticeTitle, noticeContent, regdate, cnt
        from notice
        order by root desc, step asc
        limit #{sno}, #{rowsPerPage}
    </select>
    <select id="criTotalCount" resultType="int" >
        select count(*) from notice
    </select>
            <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  -->

    <select id="selectList" resultType="vo.NoticeVO">
        select noticeNo, noticeTitle, noticeContent, regdate, cnt
        from notice
    </select>

    <select id="selectOne" resultType="vo.NoticeVO">
        select * from notice where noticeNo=#{noticeNo}
    </select>

            <!-- ** selectKey Test
            => AutoNumbering 을 편리하게 할 수 있도록 지원
            => DB작업중 먼저 어떤 키값을 가져와서 증가시켜서 입력하거나 혹은 입력후에 증가된 키값을 가져올 필요가 있을때마다.
               selectKey Tag를 이용하면 별도의 쿼리로직 없이 해당 메소드에서 일괄처리할 수가 있음.
               - keyProperty: selectKey구문의 결과가 셋팅될 대상을 지정
                              ( 즉, 매개변수로 전달된 vo의 컬럼중 결과가 셋팅될 컬럼 선택 )
               - resultType: 결과의 타입.
               - order: BEFORE 또는 AFTER
                        BEFORE로 설정하면 키를 먼저 조회하고 그 값을 keyProperty 에 셋팅한 뒤 insert 구문실행.
                        AFTER로 설정하면 insert 구문을 실행한 뒤 selectKey 구문 실행.
                        오라클에서는 insert구문 내부에서 일관된 호출형태로 처리한다.
               - statementType: STATEMENT, PREPARED 또는 CALLABLE중 하나 선택가능.
                       마이바티스에게 Statement, PreparedStatement 또는 CallableStatement를 사용하게 한다.
                       디폴트는 PREPARED.

            => OLD insert Sql 구문
                insert into notice(noticeNo,id,title,content,root)
                    values((select * from (select IFNULL(max(noticeNo),0)+1 from notice) as temp)
                    ,#{id},#{title},#{content}
                    ,(select * from (select IFNULL(max(noticeNo),0)+1 from notice) as temp))

            => Oracle 의 경우:  (select nvl(max(noticeNo),0)+1 from notice)
            -->
            <!-- 새글(원글) 등록 -> Insert -->
    <insert id="insert">
    <selectKey keyProperty="noticeNo" resultType="int" order="BEFORE"  >
        select IFNULL(max(noticeNo),0)+1 from notice
    </selectKey>
        insert into notice(noticeNo, noticeTitle, noticeContent, regdate)
        values (#{noticeNo}, #{noticeTitle}, #{noticeContent}, #{regdate})
    </insert>

    <update id="update">
        update notice set noticeTitle=#{noticeTitle}, noticeContent=#{noticeContent}
        where noticeNo=#{noticeNo}
    </update>

    <delete id="delete">
        delete from notice
    </delete>
    
    <!-- 조회수 증가 -->
    <update id="countUp">
        update notice set cnt=cnt+1 where noticeNo=#{noticeNo}
    </update>
</mapper>